#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version @@project.version@@
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download mill via java source
#   MILLW_REPOURL - repo url base for downloading mill distribution
#   MILLW_USERNAME/MILLW_PASSWORD - user and password for downloading mill
#   MILLW_VERBOSE - true: enable verbose log; debug: trace the millw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ "${MILLW_VERBOSE-}" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\n "$1"; }
case "$(uname)" in
(CYGWIN*|MINGW*) [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
                 native_path() { cygpath --path --windows "$1"; } ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n "${JAVA_HOME-}" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
      JAVACCMD="$JAVA_HOME/jre/sh/javac"
    else
      JAVACMD="$JAVA_HOME/bin/java"
      JAVACCMD="$JAVA_HOME/bin/javac"

      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ] ; then
        echo "The JAVA_HOME environment variable is not defined correctly, so millw cannot run." >&2
        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
        return 1
      fi
    fi
  else
    JAVACMD="$('set' +e; 'unset' -f command 2>/dev/null; 'command' -v java)" || :
    JAVACCMD="$('set' +e; 'unset' -f command 2>/dev/null; 'command' -v javac)" || :

    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ] ; then
      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so millw cannot run." >&2
      return 1
    fi
  fi
}

# hash string like Java String::hashCode
hash_string() {
  str="${1:-}" h=0
  while [ -n "$str" ]; do
    h=$(( ( h * 31 + $(LC_CTYPE=C printf %d "'$str") ) % 4294967296 ))
    str="${str#?}"
  done
  printf %x\\n $h
}

verbose() { :; }
[ "${MILLW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }

die() {
  printf %s\\n "$1" >&2
  exit 1
}

# set the version of Scala used by mill
if [-n "${MILL_SCALA_VERSION}" ]; then
    MILL_SCALA_VERSION="2.13"
fi

MILL_REPO_ARTIFACT_NAME="mill-dev_${MILL_SCALA_VERSION}"

get_mill_artifact_name() {
  "mill_${MILL_SCALA_VERSION:-2.13}-${1:-dev}"
}

# calculate distributionUrl, requires .config/.mill/wrapper/mill-wrapper.properties
while IFS="=" read -r key value; do
  case "$key" in (distributionUrl) distributionUrl="${value:-$distributionUrl}"; break ;; esac
done < "${0%/*}/.config/mill/wrapper/mill-wrapper.properties"
[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.config/mill/wrapper/mill-wrapper.properties"
[ -z "${MILLW_REPOURL-}" ] || distributionUrl="$MILLW_REPOURL/com/lihaoyi/$MILL_REPO_ARTIFACT_NAME/${distributionUrl#*/org/apache/mill/}"

# calculate MILL_HOME, pattern ~/.m2/wrapper/dists/apache-mill-<version>/<hash>
distributionUrlName="${distributionUrl##*/}"
distributionUrlNameMain="${distributionUrlName%-bin.*}"
MILL_HOME="$HOME/.m2/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"
MILL_CMD="mill${0##*/millw}"

if [ -d "$MILL_HOME" ]; then
  verbose "found existing MILL_HOME at $MILL_HOME"
  unset MILLW_VERBOSE MILLW_USERNAME MILLW_PASSWORD MILLW_REPOURL
  exec "$MILL_HOME/bin/$MILL_CMD" "$@" || die "MILL_HOME is not valid: cannot exec $MILL_HOME/bin/mill"
fi

case "${distributionUrl-}" in
(*?-bin.zip) ;;
(*) die "distributionUrl is not valid, must end with *-bin.zip, but found '${distributionUrl-}'" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
  trap clean HUP INT TERM EXIT
else
  die "cannot create temp dir"
fi

mkdir -p -- "${MILL_HOME%/*}"

# Download and Install Apache Maven
verbose "Couldn't find MILL_HOME, downloading and installing it ..."
verbose "Downloading from: $distributionUrl"
verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl="${distributionUrl%.zip}.tar.gz"
  distributionUrlName="${distributionUrl##*/}"
fi

# verbose opt
__MILLW_QUIET_WGET=--quiet __MILLW_QUIET_CURL=--silent __MILLW_QUIET_UNZIP=-q __MILLW_QUIET_TAR=''
[ "${MILLW_VERBOSE-}" != true ] || __MILLW_QUIET_WGET='' __MILLW_QUIET_CURL='' __MILLW_QUIET_UNZIP='' __MILLW_QUIET_TAR=v

# normalize http auth
case "${MILLW_PASSWORD:+has-password}" in
'') MILLW_USERNAME='' MILLW_PASSWORD='' ;;
has-password) [ -n "${MILLW_USERNAME-}" ] || MILLW_USERNAME='' MILLW_PASSWORD='' ;;
esac

if [ -z "${MILLW_USERNAME-}" ] && command -v wget > /dev/null; then
  verbose "Found wget ... using wget"
  wget ${__MILLW_QUIET_WGET:+"$__MILLW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName"
elif [ -z "${MILLW_USERNAME-}" ] && command -v curl > /dev/null; then
  verbose "Found curl ... using curl"
  curl ${__MILLW_QUIET_CURL:+"$__MILLW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl"
elif set_java_home; then
  verbose "Falling back to use Java to download"
  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
  cat > "$javaSource" <<-END
	public class Downloader extends java.net.Authenticator
	{
	  protected java.net.PasswordAuthentication getPasswordAuthentication()
	  {
	    return new java.net.PasswordAuthentication( System.getenv( "MILLW_USERNAME" ), System.getenv( "MILLW_PASSWORD" ).toCharArray() );
	  }
	  public static void main( String[] args ) throws Exception
	  {
	    setDefault( new Downloader() );
	    java.nio.file.Files.copy( new java.net.URL( args[0] ).openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
	  }
	}
	END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose " - Compiling Downloader.java ..."
  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")"
  verbose " - Running Downloader.java ..."
  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
fi

# unzip and move
if command -v unzip > /dev/null; then
  unzip ${__MILLW_QUIET_UNZIP:+"$__MILLW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR"
else
  tar xzf${__MILLW_QUIET_TAR:+"$__MILLW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR"
fi
printf %s\\n "$distributionUrl" > "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/millw.url"
mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MILL_HOME" || [ -d "$MILL_HOME" ] || die "fail to move MILL_HOME"

clean || :
unset MILLW_VERBOSE MILLW_USERNAME MILLW_PASSWORD MILLW_REPOURL || :
exec "$MILL_HOME/bin/$MILL_CMD" "$@"
